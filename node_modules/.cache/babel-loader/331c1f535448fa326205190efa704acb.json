{"ast":null,"code":"var _jsxFileName = \"/home/codilar/ReactHooks/hook-app/src/component/Todo/Todo.container.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport TodoList from '../TodoList';\nimport Field from '../Field';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TodoContainer() {\n  _s();\n\n  const initialState = {\n    numberState: undefined,\n    textState: undefined\n  };\n  const [item, setItem] = useState('');\n  const [itemList, setItemList] = useState([]);\n  const [count, setCount] = useState(0);\n  const [inputValues, setInputValues] = useState(initialState);\n  const {\n    numberState,\n    textState\n  } = initialState;\n\n  const onChangeSetItem = e => {\n    setItem(e.target.value);\n  };\n\n  const onClickSetItemList = () => {\n    setItemList([...itemList, {\n      item: item,\n      key: Date.now()\n    }]);\n    setItem('');\n  }; // // Render every time \n  // useEffect(() => {\n  //     console.log(\"This will render every time\");\n  // })\n  // // Render only one time - componentDidMount\n  // useEffect(() => {\n  //     console.log(\"This will render only one time like componentDidMount\");\n  // }, [])\n  // // Render when value update - componentDidUpdate\n  // useEffect(() => {\n  //     console.log(\"This is componentDidUpdate\");\n  // }, [count])\n\n\n  useEffect(() => {\n    console.log(inputValues);\n  });\n\n  const changeCount = () => {\n    setCount(count + 1);\n  };\n\n  const handelOnChangeInputFields = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputValues({ ...inputValues,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeCount,\n      children: \"Increament\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Fields\",\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        type: \"number\",\n        value: numberState,\n        name: \"numberState\",\n        onHandelChange: handelOnChangeInputFields\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        type: \"text\",\n        value: textState,\n        name: \"textState\",\n        onHandelChange: handelOnChangeInputFields\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TodoContainer, \"x/lNrJxI6vk1IyBQ5eRVH6hGIQk=\");\n\n_c = TodoContainer;\nexport default TodoContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoContainer\");","map":{"version":3,"sources":["/home/codilar/ReactHooks/hook-app/src/component/Todo/Todo.container.js"],"names":["React","useEffect","useState","TodoList","Field","TodoContainer","initialState","numberState","undefined","textState","item","setItem","itemList","setItemList","count","setCount","inputValues","setInputValues","onChangeSetItem","e","target","value","onClickSetItemList","key","Date","now","console","log","changeCount","handelOnChangeInputFields","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AAErB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,WAAW,EAAEC,SADI;AAEjBC,IAAAA,SAAS,EAAED;AAFM,GAArB;AAIA,QAAK,CAACE,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAK,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAK,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAK,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAACI,YAAD,CAA7C;AAEA,QAAK;AAAEC,IAAAA,WAAF;AAAeE,IAAAA;AAAf,MAA6BH,YAAlC;;AAEA,QAAMY,eAAe,GAAIC,CAAD,IAAO;AAC3BR,IAAAA,OAAO,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACH,GAFD;;AAIA,QAAMC,kBAAkB,GAAG,MAAM;AAC7BT,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAc;AAACF,MAAAA,IAAI,EAAEA,IAAP;AAAaa,MAAAA,GAAG,EAAEC,IAAI,CAACC,GAAL;AAAlB,KAAd,CAAD,CAAX;AACAd,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH,GAHD,CAjBqB,CAsBrB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,OAAO,CAACC,GAAR,CAAYX,WAAZ;AACH,GAFQ,CAAT;;AAIA,QAAMY,WAAW,GAAG,MAAM;AACtBb,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH,GAFD;;AAIA,QAAMe,yBAAyB,GAAIV,CAAD,IAAO;AACrC,UAAK;AAAEW,MAAAA,IAAF;AAAQT,MAAAA;AAAR,QAAkBF,CAAC,CAACC,MAAzB;AACAH,IAAAA,cAAc,CAAC,EACX,GAAGD,WADQ;AAEX,OAACc,IAAD,GAAQT;AAFG,KAAD,CAAd;AAIH,GAND;;AAQA,sBACI;AAAA,4BAWI;AAAA,gBAAMP;AAAN;AAAA;AAAA;AAAA;AAAA,YAXJ,eAYI;AAAQ,MAAA,OAAO,EAAEc,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAaI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI,QAAC,KAAD;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,KAAK,EAAErB,WAFX;AAGI,QAAA,IAAI,EAAC,aAHT;AAII,QAAA,cAAc,EAAEsB;AAJpB;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI,QAAC,KAAD;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAEpB,SAFX;AAGI,QAAA,IAAI,EAAC,WAHT;AAII,QAAA,cAAc,EAAEoB;AAJpB;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA,kBADJ;AA+BH;;GApFQxB,a;;KAAAA,a;AAsFT,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport TodoList from '../TodoList';\nimport Field from '../Field';\n\nfunction TodoContainer() {\n\n    const initialState = {\n        numberState: undefined,\n        textState: undefined\n    }\n    const[item, setItem] = useState('');\n    const[itemList, setItemList] = useState([]);\n    const[count, setCount] = useState(0);\n    const[inputValues, setInputValues] = useState(initialState);\n\n    const{ numberState, textState } = initialState;\n\n    const onChangeSetItem = (e) => {\n        setItem(e.target.value);\n    }\n\n    const onClickSetItemList = () => {\n        setItemList([...itemList, {item: item, key: Date.now()}]);\n        setItem('');\n    }\n\n    // // Render every time \n    // useEffect(() => {\n    //     console.log(\"This will render every time\");\n    // })\n\n    // // Render only one time - componentDidMount\n    // useEffect(() => {\n    //     console.log(\"This will render only one time like componentDidMount\");\n    // }, [])\n\n    // // Render when value update - componentDidUpdate\n    // useEffect(() => {\n    //     console.log(\"This is componentDidUpdate\");\n    // }, [count])\n\n    useEffect(() => {\n        console.log(inputValues)\n    })\n\n    const changeCount = () => {\n        setCount(count + 1);\n    }\n\n    const handelOnChangeInputFields = (e) => {\n        const{ name, value } = e.target;\n        setInputValues({\n            ...inputValues,\n            [name]: value\n        })\n    }\n\n    return (\n        <>\n            {/* <div className='Todo-List'>\n                <div className='Todo_input'>\n                    <input value={item} onChange={onChangeSetItem}></input>\n                    <button onClick={onClickSetItemList}>{('+')}</button>\n                </div>\n                <TodoList \n                    itemList={ itemList }\n                    setItemList={ setItemList }\n                />\n            </div> */}\n            <h2 >{count}</h2>\n            <button onClick={changeCount}>Increament</button>\n            <div className='Fields'>\n                <Field \n                    type='number'\n                    value={numberState}\n                    name=\"numberState\"\n                    onHandelChange={handelOnChangeInputFields}\n                />\n                <Field \n                    type='text'\n                    value={textState}\n                    name=\"textState\"\n                    onHandelChange={handelOnChangeInputFields}\n                />\n            </div>\n\n        </>\n    );\n}\n\nexport default TodoContainer;"]},"metadata":{},"sourceType":"module"}